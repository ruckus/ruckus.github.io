<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://blog.codycaughlan.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.codycaughlan.com/" rel="alternate" type="text/html" /><updated>2018-01-01T15:52:46-08:00</updated><id>https://blog.codycaughlan.com/</id><title type="html">Cody Caughlan: Blog</title><subtitle>Notes from Monkeys</subtitle><entry><title type="html">Beware of SQL TRUNCATE and the locking it requires</title><link href="https://blog.codycaughlan.com/2018/01/01/Beware-of-SQL-TRUNCATE.html" rel="alternate" type="text/html" title="Beware of SQL TRUNCATE and the locking it requires" /><published>2018-01-01T00:00:00-08:00</published><updated>2018-01-01T00:00:00-08:00</updated><id>https://blog.codycaughlan.com/2018/01/01/Beware-of-SQL-TRUNCATE</id><content type="html" xml:base="https://blog.codycaughlan.com/2018/01/01/Beware-of-SQL-TRUNCATE.html">&lt;p&gt;This is also a story about how the worker tier affected the database which affected the web tier.&lt;/p&gt;

&lt;p&gt;Vinosmith is a Rails-based stack. There are 3 primary tiers:&lt;/p&gt;


&lt;ol&gt;
  &lt;li&gt;Web - Unicorn/nginx&lt;/li&gt;
  &lt;li&gt;Resque - asynchronous workers&lt;/li&gt;
  &lt;li&gt;Postgres/Redis&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Dashboard screen features a rollup data set which is calculated and stored in Redis for quick lookup. There is a scheduled
job which runs at 6AM to calculate this data and insert into Redis.&lt;/p&gt;

&lt;p&gt;The background job also clears out all rows and re-populates a database table as part of the re-calculation process.&lt;/p&gt;

&lt;p&gt;Because I was doing an unqualified &lt;code&gt;DELETE&lt;/code&gt; on the table I thought that an &lt;code&gt;TRUNCATE&lt;/code&gt; statement
would be superior to a raw &lt;code&gt;DELETE&lt;/code&gt; -- so the &lt;code&gt;TRUNCATE&lt;/code&gt; has been in places for over 4 years now.&lt;/p&gt;

&lt;p&gt;Most of our customers are based on the West Coast of California and also work a normal schedule of 9AM - 5PM. &lt;/p&gt;

&lt;p&gt;Sporadically over the last few months I have gotten notifications from the AWS Elastic Load Balancer Cloud Watch alarm that no healthy hosts were available - thus bringing down the site. &lt;/p&gt;

&lt;p&gt;All of these notifications came in about 6AM and then subsided about 2-3 minutes later. But during that 2-3 minute window the site was basically unusable. But it happened rarely enough that I kind of forgot about it and I chalked it up to EC2 or ELB flakiness.&lt;/p&gt;

&lt;p&gt;I also &lt;em&gt;assumed&lt;/em&gt; that no one really noticed the issue because it was at 6AM ... and I know how few (if any) of our customers are using the product that early in the morning... &lt;/p&gt;

&lt;p&gt;But of course, eventually a Customer did notice and thus I prioritized finding the cause and a solution.&lt;/p&gt;

&lt;p&gt;Looking in the nginx logs I can see entries where nginx cannot find an upstream Unicorn worker:

&lt;code&gt;
nginx.error.log:2017/12/29 14:02:11 [error] 1099#0: *13760186 upstream timed out (110: Connection timed out) while reading response header from upstream, client: www.xxx.yyy.zzz, server: *.vinosmith.com, request: &quot;GET /health-check HTTP/1.1&quot;, upstream: &quot;http://unix:/tmp/unicorn.vinosmith.sock/health-check&quot;, host: &quot;www.xxx.yyy.zzz&quot;
&lt;/code&gt;

&lt;/p&gt;

&lt;p&gt;There are multiple web boxes in the cluster, thus multiple Unicorn/nginx instances and looking in the logs on each instance for that same time frame I can see similar log lines.&lt;/p&gt;

&lt;p&gt;So that rules out one machine getting overloaded and thus maybe unable to serve requests. Which sounds crazy, but possible. But this was affecting all instances ...&lt;/p&gt;

&lt;p&gt;I then looked in NewRelic and found that during that timeframe - shortly after 6:00AM - the Ruby VM garbage collector started going crazy, which is fine it on itself, but looking at the NewRelic report across all instances (web + worker) I traced it down to a particular Resque background job which happens to run at 6AM.&lt;/p&gt;

&lt;p&gt;Looking at that job it became clear what the problem was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The job opens a DB transaction&lt;/li&gt;
&lt;li&gt;The job then executes a &lt;code&gt;TRUNCATE&lt;/code&gt; statement to clear out the database table.&lt;/li&gt;
&lt;li&gt;The job then proceeds to run lots of other &lt;code&gt;SELECT&lt;/code&gt;s and &lt;code&gt;INSERT&lt;/code&gt;s -- doing its thing, which is great.&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;The problem was the &lt;code&gt;TRUNCATE&lt;/code&gt; statement and looking at the Postgres documentation I found the crux:

&lt;p&gt;From: &lt;a href=&quot;https://www.postgresql.org/docs/9.1/static/sql-truncate.html&quot;&gt;https://www.postgresql.org/docs/9.1/static/sql-truncate.html&lt;/a&gt;

&lt;br /&gt;&lt;br /&gt; down in the &lt;strong&gt;Notes&lt;/strong&gt; section:

&lt;em&gt;TRUNCATE acquires an ACCESS EXCLUSIVE lock on each table it operates on, which blocks all other concurrent operations on the table. When RESTART IDENTITY is specified, any sequences that are to be restarted are likewise locked exclusively. If concurrent access to a table is required, then the DELETE command should be used instead.&lt;/em&gt;

&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The key line being: &lt;strong&gt;If concurrent access to a table is required, then the DELETE command should be used instead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So what was happening was that the &lt;code&gt;TRUNCATE&lt;/code&gt; was requireing an exclusive lock on the table; the web clients were hitting the Dashboard which in turn triggers a &lt;code&gt;request-from-cache-or-recalculate&lt;/code&gt; routine which also happens to hit that DB table. These requests were getting blocked in a spin loop and then tying up that Unicorn instance. Customers were either spawning a new browser tab and hitting the same screen - thinking their busy request was a fluke. The load balancer was unable to hit the Rails endpoint for a health-check and thus eventually it pulled out all instances from the cluster, bringing down the site.&lt;/p&gt;

&lt;p&gt;Whew...&lt;/p&gt;

&lt;p&gt;Once I identified the issue the solution was clear:

&lt;ul&gt;
  &lt;li&gt;Switch to &lt;code&gt;DELETE&lt;/code&gt; from &lt;code&gt;TRUNCATE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Not that it matters at this point, but move the job to a more off-time slot like 3AM instead of 6AM.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Win!&lt;/p&gt;</content><author><name></name></author><summary type="html">This is also a story about how the worker tier affected the database which affected the web tier.</summary></entry><entry><title type="html">Auto-generating ButterKnife @Bind calls</title><link href="https://blog.codycaughlan.com/2015/09/29/auto-generating-butterknife-bind-calls.html" rel="alternate" type="text/html" title="Auto-generating ButterKnife @Bind calls" /><published>2015-09-29T19:14:28-07:00</published><updated>2015-09-29T19:14:28-07:00</updated><id>https://blog.codycaughlan.com/2015/09/29/auto-generating-butterknife-bind-calls</id><content type="html" xml:base="https://blog.codycaughlan.com/2015/09/29/auto-generating-butterknife-bind-calls.html">&lt;p&gt;If you use &lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;ButterKnife&lt;/a&gt; (and you should) for your View injections you realize that it quicks gets tedious to write all those &lt;code&gt;@Bind(R.id.foo) TextView mFoo&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;I put together a simple Ruby script which takes your XML layout as as the first argument and auto-generates these calls for you.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ruckus/5a976cf0d5a1bd3e711a.js&quot;&gt;&lt;/script&gt;&lt;p&gt;The output will look like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ruckus/cc816407a2a8d7d6345c.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">If you use ButterKnife (and you should) for your View injections you realize that it quicks gets tedious to write all those @Bind(R.id.foo) TextView mFoo calls.</summary></entry><entry><title type="html">Reverse Engineering Excel XML</title><link href="https://blog.codycaughlan.com/2015/08/05/reverse-engineering-excel-xml.html" rel="alternate" type="text/html" title="Reverse Engineering Excel XML" /><published>2015-08-05T21:47:55-07:00</published><updated>2015-08-05T21:47:55-07:00</updated><id>https://blog.codycaughlan.com/2015/08/05/reverse-engineering-excel-xml</id><content type="html" xml:base="https://blog.codycaughlan.com/2015/08/05/reverse-engineering-excel-xml.html">&lt;p&gt;I use the fantastic &lt;a href=&quot;https://github.com/randym/axlsx&quot;&gt;Axslx&lt;/a&gt; ruby library to generate xlsx reports. While it has a good amount of examples, given that it generates Excel which is a beast its just a fact that there isn&amp;rsquo;t always an example for what you’re trying to do.&lt;/p&gt;&lt;p&gt;However, since Excel is really just a series of XML files packaged as a Zip, it means we can generate an Excel doc representing our desired output and then view the XML representation. Which in turn gives us the set the of method calls and attributes we need to manipulate in Axlsx.&lt;/p&gt;&lt;p&gt;Example: I wanted to freeze Column A so when the user scrolls to the right it remains fixed. No example in Axlsx has this exact scenario.&lt;/p&gt;&lt;p&gt;Solution:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Generate an Excel doc with your desired output - in my case I froze Column A. &lt;br/&gt;&lt;/li&gt;&lt;li&gt;Change the file extension from .xlsx to .zip and un-compress it.&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Find sheet1.xml which represents your first worksheet and open it in a text editor.&lt;/li&gt;&lt;li&gt;Find the pane freezing code which in my case looks like: &lt;/li&gt;&lt;/ol&gt;&lt;script src=&quot;https://gist.github.com/ruckus/37cd0d35e44e94fc22ae.js&quot;&gt;&lt;/script&gt;&lt;p&gt;At this point you just need to translate the XML tags to the Axlsx equivalent, which looks like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ruckus/80fdaa2594015f644d55.js&quot;&gt;&lt;/script&gt;

And thats it!</content><author><name></name></author><summary type="html">I use the fantastic Axslx ruby library to generate xlsx reports. While it has a good amount of examples, given that it generates Excel which is a beast its just a fact that there isn&amp;rsquo;t always an example for what you’re trying to do.However, since Excel is really just a series of XML files packaged as a Zip, it means we can generate an Excel doc representing our desired output and then view the XML representation. Which in turn gives us the set the of method calls and attributes we need to manipulate in Axlsx.Example: I wanted to freeze Column A so when the user scrolls to the right it remains fixed. No example in Axlsx has this exact scenario.Solution:Generate an Excel doc with your desired output - in my case I froze Column A. Change the file extension from .xlsx to .zip and un-compress it.Find sheet1.xml which represents your first worksheet and open it in a text editor.Find the pane freezing code which in my case looks like: At this point you just need to translate the XML tags to the Axlsx equivalent, which looks like:</summary></entry><entry><title type="html">Convert UIColor calls to Hex</title><link href="https://blog.codycaughlan.com/2015/04/08/convert-uicolor-calls-to-hex.html" rel="alternate" type="text/html" title="Convert UIColor calls to Hex" /><published>2015-04-08T17:16:34-07:00</published><updated>2015-04-08T17:16:34-07:00</updated><id>https://blog.codycaughlan.com/2015/04/08/convert-uicolor-calls-to-hex</id><content type="html" xml:base="https://blog.codycaughlan.com/2015/04/08/convert-uicolor-calls-to-hex.html">&lt;p&gt;I have been working on porting an iOS app to Android.&lt;/p&gt;

&lt;p&gt;iOS applications specify colors using the &lt;code&gt;UIColor&lt;/code&gt; class. &lt;/p&gt;

&lt;p&gt;Android specifies colors using &lt;code&gt;#ARGB&lt;/code&gt; syntax. &lt;/p&gt;

&lt;p&gt;I was looking at lots of calls like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[UIColor colorWithRed:0.3 green:0.85 blue:0.41 alpha:0.75];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and I needed to convert these to their equivalent hex codes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codycaughlan.com/uicolor_to_android_hex.html&quot;&gt;Thus a basic Javascript utility was born. Check it out!&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I have been working on porting an iOS app to Android.</summary></entry><entry><title type="html">Perils of TextView#singleLine in a ViewPager</title><link href="https://blog.codycaughlan.com/2015/04/03/perils-of-textviewsingleline-in-a-viewpager.html" rel="alternate" type="text/html" title="Perils of TextView#singleLine in a ViewPager" /><published>2015-04-03T15:11:03-07:00</published><updated>2015-04-03T15:11:03-07:00</updated><id>https://blog.codycaughlan.com/2015/04/03/perils-of-textviewsingleline-in-a-viewpager</id><content type="html" xml:base="https://blog.codycaughlan.com/2015/04/03/perils-of-textviewsingleline-in-a-viewpager.html">&lt;p&gt;On a recent Android project I spent 1.5 days tearing my hair out over an issue that ended up being a one-line fix.&lt;/p&gt;

&lt;p&gt;The app has a &lt;code&gt;ViewPager&lt;/code&gt; which hosts one or more &lt;code&gt;GridViews&lt;/code&gt;:
&lt;img src=&quot;https://78.media.tumblr.com/e189d6a5e106b086758fc0e4ccc415a9/tumblr_inline_nm93xxpAZC1qz4akv_540.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;

&lt;p&gt;As you can see each “tile” is a handful of &lt;code&gt;TextView&lt;/code&gt; objects along with an &lt;code&gt;ImageView&lt;/code&gt; for the background.&lt;/p&gt;

&lt;p&gt;The issue is sometimes when the user swipes to scroll through pages the &lt;code&gt;ViewPager&lt;/code&gt; would not handle the touch/swipe event and nothing would happen. I know the &lt;code&gt;ViewPager&lt;/code&gt; was receiving the touch event because I could over-ride &lt;code&gt;onTouchEvent&lt;/code&gt; and log the event.&lt;/p&gt;

&lt;p&gt;It made no sense. And the issue was sporadic to make matters even worse.&lt;/p&gt;

&lt;p&gt;Without burying the lede too much the problem was that my &lt;code&gt;TextView&lt;/code&gt; (the one that says &amp;ldquo;401.75&amp;rdquo; or “7 days” for instance had `android:singleLine=“true” and it was the culprit.&lt;/p&gt;

&lt;p&gt;Basically, the case is: if the view can scroll horizontally, it intercepts the horizontal motion event and ViewPager is not able to process it anymore.&lt;/p&gt;

&lt;p&gt;Since API Level 14 TextViews have &lt;code&gt;android:scrollHorizontally&lt;/code&gt; property (and &lt;code&gt;setHorizontallyScrolling(boolean)&lt;/code&gt; method), which, if set to true, causes the TextView to intercept horizontal scroll motion events.&lt;/p&gt;

&lt;p&gt;You may set it to false either in XML or right in the code, but watch out: &lt;code&gt;android:singleLine&lt;/code&gt; property forces &lt;code&gt;android:scrollHorizontally&lt;/code&gt; to be set to true! Very tricky point! But fortunately, you usually able to safely replace single line property with &lt;code&gt;android:maxLines=&quot;1&quot;&lt;/code&gt; and necessary ellipsize value.&lt;/p&gt;

&lt;p&gt;Since I didnt really need &lt;code&gt;singleLine&lt;/code&gt; I removed it and voila, ViewPager was swiping again!&lt;/p&gt;

&lt;p&gt;So moral of the story: watch out for &lt;code&gt;singleLine&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">On a recent Android project I spent 1.5 days tearing my hair out over an issue that ended up being a one-line fix.</summary></entry><entry><title type="html">Archiving RDS logs to S3</title><link href="https://blog.codycaughlan.com/2015/01/08/archiving-rds-logs-to-s3.html" rel="alternate" type="text/html" title="Archiving RDS logs to S3" /><published>2015-01-08T20:00:00-08:00</published><updated>2015-01-08T20:00:00-08:00</updated><id>https://blog.codycaughlan.com/2015/01/08/archiving-rds-logs-to-s3</id><content type="html" xml:base="https://blog.codycaughlan.com/2015/01/08/archiving-rds-logs-to-s3.html">&lt;p&gt;At &lt;a href=&quot;http://vinosmith.com&quot;&gt;Vinosmith&lt;/a&gt; we use Amazon RDS - Postgres as our primary data store. I love it. RDS has seamless master/slave failover and great performance for my needs. Its wonderful not to have to monitor my primary DB myself and wait for the dreaded 3AM phone call.&lt;/p&gt;
&lt;p&gt;Anyways. With RDS you get 7 days of log retention. After 7 days the logs are not accessible.&lt;/p&gt;
&lt;p&gt;In my case I have &lt;code&gt;log_statements=mod&lt;/code&gt; because I find it very helpful to see the DML statements that are made.&lt;/p&gt;
&lt;p&gt;Furthermore, sometimes I need to research an issue that goes back weeks.&lt;/p&gt;
&lt;p&gt;Hence the need to download RDS logs and store them on S3 for archival purposes.&lt;/p&gt;
&lt;p&gt;Fortunately, the RDS API offers an easy way to download logs.&lt;/p&gt;
&lt;p&gt;I have the following Ruby script set up as an hourly cron. The script downloads the previous hour log file, compresses it with gzip and archives it to S3.&lt;/p&gt;
&lt;p&gt;The RDS and S3 credentials are based on limited AWS IAM roles with strict policies.&lt;/p&gt;
&lt;p&gt;The script is as follows:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/ruckus/d30531c543d677eb3acb.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">At Vinosmith we use Amazon RDS - Postgres as our primary data store. I love it. RDS has seamless master/slave failover and great performance for my needs. Its wonderful not to have to monitor my primary DB myself and wait for the dreaded 3AM phone call. Anyways. With RDS you get 7 days of log retention. After 7 days the logs are not accessible. In my case I have log_statements=mod because I find it very helpful to see the DML statements that are made. Furthermore, sometimes I need to research an issue that goes back weeks. Hence the need to download RDS logs and store them on S3 for archival purposes. Fortunately, the RDS API offers an easy way to download logs. I have the following Ruby script set up as an hourly cron. The script downloads the previous hour log file, compresses it with gzip and archives it to S3. The RDS and S3 credentials are based on limited AWS IAM roles with strict policies. The script is as follows:</summary></entry><entry><title type="html">Yosemite upgrade breaks Homebrew installed Postgres</title><link href="https://blog.codycaughlan.com/2014/10/18/yosemite-upgrade-breaks-homebrew-installed.html" rel="alternate" type="text/html" title="Yosemite upgrade breaks Homebrew installed Postgres" /><published>2014-10-18T15:15:00-07:00</published><updated>2014-10-18T15:15:00-07:00</updated><id>https://blog.codycaughlan.com/2014/10/18/yosemite-upgrade-breaks-homebrew-installed</id><content type="html" xml:base="https://blog.codycaughlan.com/2014/10/18/yosemite-upgrade-breaks-homebrew-installed.html">&lt;p&gt;If you installed Postgres via Homebrew and then upgraded to Yosemite and now your Postgres doesn&amp;rsquo;t start than here is the solution.&lt;/p&gt;
&lt;p&gt;Turns out that for some reason during the upgrade some directories are removed from &lt;code&gt;$PGDATA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the case of a Homebrew installation &lt;code&gt;$PGDATA&lt;/code&gt; is &lt;code&gt;/usr/local/var/postgres&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lets create the missing directories:&lt;/p&gt;
&lt;p&gt;&lt;code&gt; $ cd /usr/local/var/postgres &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ mkdir {pg_tblspc,pg_twophase,pg_stat_tmp}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to start Postgres if you&amp;rsquo;re using the standard &lt;code&gt;launchctl&lt;/code&gt; route:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">If you installed Postgres via Homebrew and then upgraded to Yosemite and now your Postgres doesn&amp;rsquo;t start than here is the solution. Turns out that for some reason during the upgrade some directories are removed from $PGDATA. In the case of a Homebrew installation $PGDATA is /usr/local/var/postgres Lets create the missing directories: $ cd /usr/local/var/postgres $ mkdir {pg_tblspc,pg_twophase,pg_stat_tmp}</summary></entry><entry><title type="html">Using a ViewPager as a Header in a ListView</title><link href="https://blog.codycaughlan.com/2014/09/25/using-a-viewpager-as-a-header-in-a-listview.html" rel="alternate" type="text/html" title="Using a ViewPager as a Header in a ListView" /><published>2014-09-25T13:50:00-07:00</published><updated>2014-09-25T13:50:00-07:00</updated><id>https://blog.codycaughlan.com/2014/09/25/using-a-viewpager-as-a-header-in-a-listview</id><content type="html" xml:base="https://blog.codycaughlan.com/2014/09/25/using-a-viewpager-as-a-header-in-a-listview.html">&lt;p&gt;I have been working on a new Android application and I wanted to implement a ViewPager as a Header in a ListView. &lt;/p&gt;
&lt;p&gt;The ViewPager is a series of Images loaded asynchronously using theSquare Picasso library.&lt;/p&gt;
&lt;p&gt;The problem I ran into is that even though I am adding the ViewPager to the ListView via &lt;code&gt;myListView.addHeaderView(theViewPager);&lt;/code&gt;, upon rendering the header view was not visible. It was as if it had 0 width and height (hint hint).&lt;/p&gt;
&lt;p&gt;When I pulled my ViewPager out by itself than it worked just fine.&lt;/p&gt;
&lt;p&gt;If I implemented an ImageView with a static background drawable and attached that to the ListView header than it worked.&lt;/p&gt;
&lt;p&gt;Both of these experiments pushed me in the direction of learning that when the header view is added the ListView really wants to know the layout metrics of the header view and is &lt;strong&gt;not&lt;/strong&gt; cool with having to know it after the fact (because the images are loaded asynchronously).&lt;/p&gt;
&lt;p&gt;This solution is to fix the ViewPager (header) layout params, which can be done in XML or programmatically.&lt;/p&gt;
&lt;p&gt;My programmatic solution is to fix the width of the ViewPager to the device width and hard-code the height, which is acceptable for my scenario.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/ruckus/df82ff441994580ebac2.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">I have been working on a new Android application and I wanted to implement a ViewPager as a Header in a ListView.  The ViewPager is a series of Images loaded asynchronously using theSquare Picasso library. The problem I ran into is that even though I am adding the ViewPager to the ListView via myListView.addHeaderView(theViewPager);, upon rendering the header view was not visible. It was as if it had 0 width and height (hint hint). When I pulled my ViewPager out by itself than it worked just fine. If I implemented an ImageView with a static background drawable and attached that to the ListView header than it worked. Both of these experiments pushed me in the direction of learning that when the header view is added the ListView really wants to know the layout metrics of the header view and is not cool with having to know it after the fact (because the images are loaded asynchronously). This solution is to fix the ViewPager (header) layout params, which can be done in XML or programmatically. My programmatic solution is to fix the width of the ViewPager to the device width and hard-code the height, which is acceptable for my scenario.</summary></entry><entry><title type="html">Playing around with Ansible</title><link href="https://blog.codycaughlan.com/2014/08/06/playing-around-with-ansible.html" rel="alternate" type="text/html" title="Playing around with Ansible" /><published>2014-08-06T20:16:48-07:00</published><updated>2014-08-06T20:16:48-07:00</updated><id>https://blog.codycaughlan.com/2014/08/06/playing-around-with-ansible</id><content type="html" xml:base="https://blog.codycaughlan.com/2014/08/06/playing-around-with-ansible.html">&lt;p&gt;Configuration Management is all the rage, certainly makes bootstrapping machines easier.&lt;/p&gt;
&lt;p&gt;In a previous life I used Puppet and came to hate it. Seemed like bringing a dump truck to a knife fight. Also dealing with the whole puppetmaster became a fiasco.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been hearing about &lt;a href=&quot;http://www.ansible.com/home&quot;&gt;Ansible&lt;/a&gt; and thought I would give it a spin. I like the idea of driving the operations from a machine (what I call &amp;ldquo;push&amp;rdquo;), which is in contrast to the Puppet flow where each node &amp;ldquo;pulls&amp;rdquo; down its config.&lt;/p&gt;
&lt;p&gt;Anyways, I&amp;rsquo;ve started a repository which contains various playbooks I used to get started.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ruckus/ansible-sandbox&quot;&gt;https://github.com/ruckus/ansible-sandbox&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="ansible configuration-management" /><summary type="html">Configuration Management is all the rage, certainly makes bootstrapping machines easier. In a previous life I used Puppet and came to hate it. Seemed like bringing a dump truck to a knife fight. Also dealing with the whole puppetmaster became a fiasco. I&amp;rsquo;ve been hearing about Ansible and thought I would give it a spin. I like the idea of driving the operations from a machine (what I call &amp;ldquo;push&amp;rdquo;), which is in contrast to the Puppet flow where each node &amp;ldquo;pulls&amp;rdquo; down its config. Anyways, I&amp;rsquo;ve started a repository which contains various playbooks I used to get started. https://github.com/ruckus/ansible-sandbox</summary></entry><entry><title type="html">Rails &amp;amp; Quickbooks Web Connector (QWC)</title><link href="https://blog.codycaughlan.com/2014/06/07/rails-quickbooks-web-connector-qwc.html" rel="alternate" type="text/html" title="Rails &amp; Quickbooks Web Connector (QWC)" /><published>2014-06-07T23:51:00-07:00</published><updated>2014-06-07T23:51:00-07:00</updated><id>https://blog.codycaughlan.com/2014/06/07/rails-quickbooks-web-connector-qwc</id><content type="html" xml:base="https://blog.codycaughlan.com/2014/06/07/rails-quickbooks-web-connector-qwc.html">&lt;p&gt;Recently I have needed to integrate a Quickbooks Desktop instance with my Rails app. &lt;/p&gt;
&lt;p&gt;As of Summer 2013 Intuit has deprecated the REST API whereby a client can communicate with a Quickbooks Desktop instance via REST. This leaves either the QWC route or straight-up Windows COM programming. I&amp;rsquo;d rather hit my thumbs with a 10 lb. sledge than use COM. So QWC it is!&lt;/p&gt;
&lt;p&gt;The QWC approach uses SOAP - which stands for Slippery Obtuse Alligator Playtime. Which is a perfectly apt description of the byzantine SOAP protocol.&lt;/p&gt;

&lt;p&gt;Fortunately the WashOut gem does most of the heavy lifting. The hardest part was properly configuring the WashOut endpoint. Check out this Gist which contains the pertinent parts:&lt;/p&gt;
&lt;p&gt;
&lt;script src=&quot;https://gist.github.com/ruckus/e62d4200deef7e376294.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;In my case I have Quickbooks Pro 2013 running in a VMWare instance on a OS X host. My Rails app is running on the OS X host. Thus we need to have a publicly accessible URL for the AppUrl in the QWC config. Which is really my Rails apps in development exposed to the World Wide Web. &lt;/p&gt;
&lt;p&gt;I have found the &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt; service to be fantastic for this. I run my Rails app locally on port 3000, then run `ngrok 3000`. I am given an https URL which I can then use in the `.qwc` file.&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently I have needed to integrate a Quickbooks Desktop instance with my Rails app.  As of Summer 2013 Intuit has deprecated the REST API whereby a client can communicate with a Quickbooks Desktop instance via REST. This leaves either the QWC route or straight-up Windows COM programming. I&amp;rsquo;d rather hit my thumbs with a 10 lb. sledge than use COM. So QWC it is! The QWC approach uses SOAP - which stands for Slippery Obtuse Alligator Playtime. Which is a perfectly apt description of the byzantine SOAP protocol.</summary></entry></feed>